# Reference: https://python.langchain.com/docs/integrations/document_transformers/openai_metadata_tagger/

from pydantic import BaseModel, Field
from typing import List, Optional

class LLMGeneratedMetadata(BaseModel): 
    """
    Returns the blank schema for Lagnchain MetadataTagger to fill in via LLM. This is used to generate some parts of the metadata that cannot be made just by Langchain alone.

    Metadata tagging can only be generated by OpenAI models in Langchain. Local models that supports OpenAI function calling is only somewhat supported by local-llm-function-calling.

    Some of these fields are redundant, and already detected by AST. This is just kept as a potential use for cross validation, or just for filling in the gaps.
    """
    block_type: str = Field(description="Type of code block, either class/method/function/others. other block refers to when the code has no clear blocks such as when it exists in the root of the code file.")
    block_name:  str = Field(description="name of block e.g class name, function name")
    block_args: List[str] = Field(description="All argument variable names if any")
    return_var_llm:  str = Field(description="Returns name of return variable if clearcut, else if the return statement is complex such as an expression, return a variable name that sufficiently represents the return variable")
    functions_called: List[str] = Field(description="List of other functions called, from internal code or external libraries")
    code_summary: str = Field(description="Explanation of purpose of code")  #  Code summary


class ASTGeneratedMetadata(BaseModel):
    """
    Returns the schema returned only by the AST part of the Document Loader. This is for reference only, not really needed to be called.
    """
    # Returns the schema for any generic code document.
    relative_path: str  # Path to source file relative to project base directory
    start_offset: int  # Start byte offset of block in source code
    end_offset: int  # End byte offset of block in source code

    # AST generated blocks
    block_type: str  # Type of block. Others block will contain simplified code for other blocks through commenting. Either class/method/function/others
    block_name: str  # Name of block e.g class, function, method names
    block_args: List[str]  # All argument variable names if available
    parent_type: str  # Parent block. Either root/class
    parent_name: str  # Name of parent block
    return_var_ast: Optional[str]  # Returns name of return variable if clearcut, else if its an expression, then returns None.
    functions_called: List[str]   # list of functions called
    docstrings: List[str]  # list of docstrings and comments

class FullCodeDocumentMetadata(BaseModel):
    """
    The DocumentLoader returns full metadata in the following schema, for use for general retrieval tasking (e.g contextual) or retrieval of citations (using paths and start/end offsets). 

    AST and LLM generated data are separated, so that its easy to use one or the other.
    """
    ast_generated: ASTGeneratedMetadata
    llm_generated: LLMGeneratedMetadata

